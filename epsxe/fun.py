import io
import glob
import os
import png
class Br:
    def __init__(self,data):
        self.data = data
    def readUint8(self,endian="little"):
        return int.from_bytes(self.data.read(1), byteorder=endian, signed=False)
    def readUint16(self,endian="little"):
        return  int.from_bytes(self.data.read(2), byteorder=endian, signed=False)
    def readUint24(self,endian="little"):
        return  int.from_bytes(self.data.read(3), byteorder=endian, signed=False)
    def readUint32(self,endian="little"):
        return int.from_bytes(self.data.read(4), byteorder=endian, signed=False)
    def readInt8(self,endian="little"):
        return int.from_bytes(self.data.read(1), byteorder=endian, signed=True)
    def readInt16(self,endian="little"):
        return  int.from_bytes(self.data.read(2), byteorder=endian, signed=True)
    def readInt24(self,endian="little"):
        return  int.from_bytes(self.data.read(3), byteorder=endian, signed=True)
    def readInt32(self,endian="little"):
        return int.from_bytes(self.data.read(4), byteorder=endian, signed=True)
    def wpad(self,num,pad= b"\x00"):
        padding = num - (self.data.tell() % num or num)
        if padding:
            self.data.write(pad * padding)
        return 0
    def rpad(self,num,t=False):
        pos = self.data.tell()
        if t:
            pos = num
        padding = num - (pos % num or num)
        self.data.read(padding)
        return 0
    def getUtf8(self,offset=0):
        base = self.data.tell()
        if offset:
            self.data.seek(offset,0)
        chars = b""
        while True:
            c = self.data.read(1)
            if c == b"\x00":
                if offset:
                    self.data.seek(base,0)
                return chars.decode('utf-8')
            chars+=c
    def getUtf8B(self):

        chars = b""
        while True:
            c = self.data.read(1)
            if c == b"\x00":
                return chars
            chars+=c
    def getJis(self,offset=0):
        base = self.data.tell()
        if offset:
            self.data.seek(offset,0)
        chars = b""
        while True:
            c = self.data.read(1)
            if c == b"\x00":
                if offset:
                    self.data.seek(base,0)
                return chars.decode('shift-jis',"backslashreplace")
            chars+=c
    def getUtf16(self,offset):
        base = self.data.tell()
        self.data.seek(offset,0)
        chars = b""
        while True:
            c = self.data.read(2)
            if (c == b"\x00\x00") or (c == b"\xFF\xFF"):
                self.data.seek(base,0)
                return chars.decode('utf-16')
            chars+=c
    def getsize(self):
        pos = self.data.tell()
        self.data.seek(0,0)
        size = len(self.data.read())
        self.data.seek(pos,0)
        return size
    def getdata(self):
        pos = self.data.tell()
        self.data.seek(0,0)
        dat =self.data.read()
        self.data.seek(pos,0)
        return dat
    def getBytes(self,pos,size):
        base = self.data.tell()
        self.data.seek(pos,0)
        bin = self.data.read(size)
        self.data.seek(base,0)
        return bin
    def rt(self):
        text = []
        while True :
            c = self.data.readline()

            if c[:30] == "------------------------------":
                return "".join(text)

            text.append(c)
    def readline(self):
        data = self.data.readline()
        return data
    def seek(self,offset, origin=0):
        self.data.seek(offset,origin)
        return ""
    def tell(self):
        data = self.data.tell()
        return data
    def read(self,x=False):
        if x:
            output = self.data.read(x)
        else:
            output = self.data.read()
        return output
    def write(self,indata):
        self.data.write(indata)
        return ""
    def writeUint32B(self,x):
        self.data.write(x.to_bytes(4, byteorder="big", signed=False))
    def writeUint32(self,x):
        self.data.write(x.to_bytes(4, byteorder='little', signed=False))
    def writeUint16(self,x):
        self.data.write(x.to_bytes(2, byteorder='little', signed=False))
    def writeUint8(self,x):
        self.data.write(x.to_bytes(1, byteorder="big", signed=False))
    def writeintB(self,x,y):
        self.data.write(x.to_bytes(y, byteorder="big", signed=False))
    def writeInt16(self,x):
        self.data.write(x.to_bytes(2, byteorder='little', signed=True))

    def close(self):
        self.data.close()
        return ""
def globList(path):
    files = glob.glob(path)
    return files
def fileSave(data,name):
    os.makedirs(os.path.dirname(name), exist_ok=True)
    output = open(name, "wb")
    output.write(data)


class Pal:
    def __init__(self,data):
        self.data = Br(io.BytesIO(data))
        self.total = len(data)//2

    def getpal(self):
        f = self.data
        total =self.total
        ray = []
        tab = {0: 0x00,
               1: 0x08,
               2: 0x10,
               3: 0x18,
               4: 0x21,
               5: 0x29,
               6: 0x31,
               7: 0x39,
               8: 0x42,
               9: 0x4A,
               10: 0x52,
               11: 0x5A,
               12: 0x63,
               13: 0x6B,
               14: 0x73,
               15: 0x7B,
               16: 0x84,
               17: 0x8C,
               18: 0x94,
               19: 0x9C,
               20: 0xA5,
               21: 0xAD,
               22: 0xB5,
               23: 0xBD,
               24: 0xC6,
               25: 0xCE,
               26: 0xD6,
               27: 0xDE,
               28: 0xE7,
               29: 0xEF,
               30: 0xF7,
               31: 0xFF,
               }
        for x in range(total):
            p = f.readUint16()
            blue = tab[(p & 0x7fff) >> 10]
            green = tab[(p & 0x3ff) >> 5]
            red = tab[(p & 0x1f)]
            alpha = (p >> 15) * 255
            ray.append((red,green,blue,alpha),)
        return  ray

class Tile:
    def __init__(self,data,w,h):
        self.data = Br(io.BytesIO(data))
        self.size = len(data)
        self.w = w
        self.h = h
        self.tile = Br(io.BytesIO(data))

    def getpng(self,pal):
        h =self.h
        w = self.w
        f = self.tile
        s =[]
        for x in range(h):
            ww = []
            for y in range(w):
                ww.append(f.readUint8())
            s.append(ww)
        tmp =png.Writer(len(s[0]), len(s), palette=pal, bitdepth=8)
        f = Br(io.BytesIO(b''))
        tmp.write(f, s)
        return f.getdata()

class Tile4:
     def __init__(self,data,info):
         self.data = Br(io.BytesIO(data))
         self.size = len(data)
         self.w = info[2]<<2
         self.h = info[3]
         self.tile = Br(io.BytesIO(data))

     def getpng(self,pal):
        w = self.w
        h = self.h
        f = self.tile
        f.seek(0,0)
        s =[]
        for x in range(h):
            ww = []
            for y in range(w//2):
                c = f.readUint8()
                ww.append(c & 0x0f)
                ww.append((c & 0xf0)>>4)
            s.append(ww)
        tmp =png.Writer(len(s[0]), len(s), palette=pal, bitdepth=4)
        f = Br(io.BytesIO(b''))
        tmp.write(f, s)
        return f.getdata()
        
tabpal = {0x0: 0,
          0x1: 0,
          0x2: 0,
          0x3: 0,
          0x4: 0,
          0x5: 0,
          0x6: 0,
          0x7: 0,
          0x8: 1,
          0x9: 1,
          0xa: 1,
          0xb: 1,
          0xc: 1,
          0xd: 1,
          0xe: 1,
          0xf: 1,
          0x10: 2,
          0x11: 2,
          0x12: 2,
          0x13: 2,
          0x14: 2,
          0x15: 2,
          0x16: 2,
          0x17: 2,
          0x18: 3,
          0x19: 3,
          0x1a: 3,
          0x1b: 3,
          0x1c: 3,
          0x1d: 3,
          0x1e: 3,
          0x1f: 3,
          0x20: 4,
          0x21: 4,
          0x22: 4,
          0x23: 4,
          0x24: 4,
          0x25: 4,
          0x26: 4,
          0x27: 4,
          0x28: 4,
          0x29: 5,
          0x2a: 5,
          0x2b: 5,
          0x2c: 5,
          0x2d: 5,
          0x2e: 5,
          0x2f: 5,
          0x30: 5,
          0x31: 6,
          0x32: 6,
          0x33: 6,
          0x34: 6,
          0x35: 6,
          0x36: 6,
          0x37: 6,
          0x38: 6,
          0x39: 7,
          0x3a: 7,
          0x3b: 7,
          0x3c: 7,
          0x3d: 7,
          0x3e: 7,
          0x3f: 7,
          0x40: 7,
          0x41: 7,
          0x42: 8,
          0x43: 8,
          0x44: 8,
          0x45: 8,
          0x46: 8,
          0x47: 8,
          0x48: 8,
          0x49: 8,
          0x4a: 9,
          0x4b: 9,
          0x4c: 9,
          0x4d: 9,
          0x4e: 9,
          0x4f: 9,
          0x50: 9,
          0x51: 9,
          0x52: 10,
          0x53: 10,
          0x54: 10,
          0x55: 10,
          0x56: 10,
          0x57: 10,
          0x58: 10,
          0x59: 10,
          0x5a: 11,
          0x5b: 11,
          0x5c: 11,
          0x5d: 11,
          0x5e: 11,
          0x5f: 11,
          0x60: 11,
          0x61: 11,
          0x62: 11,
          0x63: 12,
          0x64: 12,
          0x65: 12,
          0x66: 12,
          0x67: 12,
          0x68: 12,
          0x69: 12,
          0x6a: 12,
          0x6b: 13,
          0x6c: 13,
          0x6d: 13,
          0x6e: 13,
          0x6f: 13,
          0x70: 13,
          0x71: 13,
          0x72: 13,
          0x73: 14,
          0x74: 14,
          0x75: 14,
          0x76: 14,
          0x77: 14,
          0x78: 14,
          0x79: 14,
          0x7a: 14,
          0x7b: 15,
          0x7c: 15,
          0x7d: 15,
          0x7e: 15,
          0x7f: 15,
          0x80: 15,
          0x81: 15,
          0x82: 15,
          0x83: 16,
          0x84: 16,
          0x85: 16,
          0x86: 16,
          0x87: 16,
          0x88: 16,
          0x89: 16,
          0x8a: 16,
          0x8b: 16,
          0x8c: 17,
          0x8d: 17,
          0x8e: 17,
          0x8f: 17,
          0x90: 17,
          0x91: 17,
          0x92: 17,
          0x93: 17,
          0x94: 18,
          0x95: 18,
          0x96: 18,
          0x97: 18,
          0x98: 18,
          0x99: 18,
          0x9a: 18,
          0x9b: 18,
          0x9c: 19,
          0x9d: 19,
          0x9e: 19,
          0x9f: 19,
          0xa0: 19,
          0xa1: 19,
          0xa2: 19,
          0xa3: 19,
          0xa4: 20,
          0xa5: 20,
          0xa6: 20,
          0xa7: 20,
          0xa8: 20,
          0xa9: 20,
          0xaa: 20,
          0xab: 20,
          0xac: 20,
          0xad: 21,
          0xae: 21,
          0xaf: 21,
          0xb0: 21,
          0xb1: 21,
          0xb2: 21,
          0xb3: 21,
          0xb4: 21,
          0xb5: 22,
          0xb6: 22,
          0xb7: 22,
          0xb8: 22,
          0xb9: 22,
          0xba: 22,
          0xbb: 22,
          0xbc: 22,
          0xbd: 23,
          0xbe: 23,
          0xbf: 23,
          0xc0: 23,
          0xc1: 23,
          0xc2: 23,
          0xc3: 23,
          0xc4: 23,
          0xc5: 24,
          0xc6: 24,
          0xc7: 24,
          0xc8: 24,
          0xc9: 24,
          0xca: 24,
          0xcb: 24,
          0xcc: 24,
          0xcd: 24,
          0xce: 25,
          0xcf: 25,
          0xd0: 25,
          0xd1: 25,
          0xd2: 25,
          0xd3: 25,
          0xd4: 25,
          0xd5: 25,
          0xd6: 26,
          0xd7: 26,
          0xd8: 26,
          0xd9: 26,
          0xda: 26,
          0xdb: 26,
          0xdc: 26,
          0xdd: 26,
          0xde: 27,
          0xdf: 27,
          0xe0: 27,
          0xe1: 27,
          0xe2: 27,
          0xe3: 27,
          0xe4: 27,
          0xe5: 27,
          0xe6: 28,
          0xe7: 28,
          0xe8: 28,
          0xe9: 28,
          0xea: 28,
          0xeb: 28,
          0xec: 28,
          0xed: 28,
          0xee: 28,
          0xef: 29,
          0xf0: 29,
          0xf1: 29,
          0xf2: 29,
          0xf3: 29,
          0xf4: 29,
          0xf5: 29,
          0xf6: 29,
          0xf7: 30,
          0xf8: 30,
          0xf9: 30,
          0xfa: 30,
          0xfb: 30,
          0xfc: 30,
          0xfd: 30,
          0xfe: 30,
          0xff: 31, }


mapdict = {
0x00:"MAP00",
0x01:"MAP01",
0x02:"MAP02",
0x03:"MAP03",
0x04:"MAP04",
0x05:"MAP05",
0x06:"MAP06",
0x07:"MAP07",
0x08:"FARM1SPRING",
0x09:"FARM1SUMMER",
0x0A:"FARM1FALL",
0x0B:"FARM1WINTER",
0x0C:"FARM2SPRING",
0x0D:"FARM2SUMMER",
0x0E:"FARM2FALL",
0x0F:"FARM2WINTER",
0x10:"FARM3SPRING",
0x11:"FARM3SUMMER",
0x12:"FARM3FALL",
0x13:"FARM3WINTER",
0x14:"FARM4SPRING",
0x15:"FARM4SUMMER",
0x16:"FARM4FALL",
0x17:"FARM4WINTER",
0x18:"MAPPOULTRYFAMSPRING",
0x19:"MAPPOULTRYFAMSUMMER",
0x1A:"MAPPOULTRYFAMFALL",
0x1B:"MAPPOULTRYFAMWINTER",
0x1C:"MAPYODELRANCHSPRING",
0x1D:"MAPYODELRANCHSUMMER",
0x1E:"MAPYODELRANCHFALL",
0x1F:"MAPYODELRANCHWINTER",
0x20:"MAPBLACKSMITHSPRING",
0x21:"MAPBLACKSMITHSUMMER",
0x22:"MAPBLACKSMITHFALL",
0x23:"MAPBLACKSMITHWINTER",
0x24:"MAPPERPUSSPRING",
0x25:"MAPPERPUSSUMMER",
0x26:"MAPPERPUSFALL",
0x27:"MAPPERPUSWINTER",
0x28:"MAPKLINIKSPRING",
0x29:"MAPKLINIKSUMMER",
0x2A:"MAPKLINIKFALL",
0x2B:"MAPKLINIKWINTER",
0x2C:"MAPGEREJASPRING",
0x2D:"MAPGEREJASUMMER",
0x2E:"MAPGEREJAFALL",
0x2F:"MAPGEREJAWINTER",
0x30:"MAPINNSPRING",
0x31:"MAPINNSUMMER",
0x32:"MAPINNFALL",
0x33:"MAPINNWINTER",
0x34:"MAPALUNALUNSPRING",
0x35:"MAPALUNALUNSUMMER",
0x36:"MAPALUNALUNFALL",
0x37:"MAPALUNALUNWINTER",
0x38:"MAPPANTAISPRING",
0x39:"MAPPANTAISUMMER",
0x3A:"MAPPANTAIFALL",
0x3B:"MAPPANTAIWINTER",
0x3C:"MAPHILLTOPSPRING",
0x3D:"MAPHILLTOPSUMMER",
0x3E:"MAPHILLTOPFALL",
0x3F:"MAPHILLTOPWINTER",
0x40:"MAPHILL2SPRING",
0x41:"MAPHILL2SUMMER",
0x42:"MAPHILL2FALL",
0x43:"MAPHILL2WINTER",
0x44:"MAPLAKESPRING",
0x45:"MAPLAKESUMMER",
0x46:"MAPLAKEFALL",
0x47:"MAPLAKEWINTER",
0x48:"MAPHOTSPRINGSPRING",
0x49:"MAPHOTSPRINGSUMMER",
0x4A:"MAPHOTSPRINGFALL",
0x4B:"MAPHOTSPRINGWINTER",
0x4C:"MAPGOTZSPRING",
0x4D:"MAPGOTZSUMMER",
0x4E:"MAPGOTZFALL",
0x4F:"MAPGOTZWINTER",
0x50:"MCHOUSE1SPRING",
0x51:"MCHOUSE1SUMMER",
0x52:"MCHOUSE1FALL",
0x53:"MCHOUSE1WINTER",
0x54:"MCHOUSE2SPRING",
0x55:"MCHOUSE2SUMMER",
0x56:"MCHOUSE2FALL",
0x57:"MCHOUSE2WINTER",
0x58:"MCHOUSE3SPRING",
0x59:"MCHOUSE3SUMMER",
0x5A:"MCHOUSE3FALL",
0x5B:"MCHOUSE3WINTER",
0x5C:"KNDGKUDASPRING",
0x5D:"KNDGKUDASUMMER",
0x5E:"KNDGKUDAFALL",
0x5F:"KNDGKUDAWINTER",
0x60:"KNDGDOMBASPRING",
0x61:"KNDGDOMBASUMMER",
0x62:"KNDGDOMBAFALL",
0x63:"KNDGDOMBAWINTER",
0x64:"KNDGDOMBAUPSPRING",
0x65:"KNDGDOMBAUPSUMMER",
0x66:"KNDGDOMBAUPFALL",
0x67:"KNDGDOMBAUPWINTER",
0x68:"KNDGDOMBAUP1SPRING",
0x69:"KNDGDOMBAUP1SUMMER",
0x6A:"KNDGDOMBAUP1FALL",
0x6B:"KNDGDOMBAUP1WINTER",
0x6C:"KNDGDOMBAUP2SPRING",
0x6D:"KNDGDOMBAUP2SUMMER",
0x6E:"KNDGDOMBAUP2FALL",
0x6F:"KNDGDOMBAUP2WINTER",
0x70:"KNDGAYAMSPRING",
0x71:"KNDGAYAMSUMMER",
0x72:"KNDGAYAMFALL",
0x73:"KNDGAYAMWINTER",
0x74:"KNDGAYAMUP1SPRING",
0x75:"KNDGAYAMUP1SUMMER",
0x76:"KNDGAYAMUP1FALL",
0x77:"KNDGAYAMUP1WINTER",
0x78:"KNDGAYAMUP2SPRING",
0x79:"KNDGAYAMUP2SUMMER",
0x7A:"KNDGAYAMUP2FALL",
0x7B:"KNDGAYAMUP2WINTER",
0x7C:"HOTHOUSESPRING",
0x7D:"HOTHOUSESUMMER",
0x7E:"HOTHOUSEFALL",
0x7F:"HOTHOUSEWINTER",
0x80:"RMHPOPURILANTAI1SPRING",
0x81:"RMHPOPURILANTAI1SUMMER",
0x82:"RMHPOPURILANTAI1FALL",
0x83:"RMHPOPURILANTAI1WINTER",
0x84:"RMHPOPURILANTAI2SPRING",
0x85:"RMHPOPURILANTAI2SUMMER",
0x86:"RMHPOPURILANTAI2FALL",
0x87:"RMHPOPURILANTAI2WINTER",
0x88:"RMHBARLEYLANTAI1SPRING",
0x89:"RMHBARLEYLANTAI1SUMMER",
0x8A:"RMHBARLEYLANTAI1FALL",
0x8B:"RMHBARLEYLANTAI1WINTER",
0x8C:"RMHBARLEYLANTAI2SPRING",
0x8D:"RMHBARLEYLANTAI2SUMMER",
0x8E:"RMHBARLEYLANTAI2FALL",
0x8F:"RMHBARLEYLANTAI2WINTER",
0x90:"RMHMANNALT1SPRING",
0x91:"RMHMANNALT1SUMMER",
0x92:"RMHMANNALT1FALL",
0x93:"RMHMANNALT1WINTER",
0x94:"RMHMANNALT2SPRING",
0x95:"RMHMANNALT2SUMMER",
0x96:"RMHMANNALT2FALL",
0x97:"RMHMANNALT2WINTER",
0x98:"RMHMANNABASEMENTSPRING",
0x99:"RMHMANNABASEMENTSUMMER",
0x9A:"RMHMANNABASEMENTFALL",
0x9B:"RMHMANNABASEMENTWINTER",
0x9C:"RMHSAIBARAHSPRING",
0x9D:"RMHSAIBARAHSUMMER",
0x9E:"RMHSAIBARAHFALL",
0x9F:"RMHSAIBARAHWINTER",
0xA0:"PERPUSTAKAANSPRING",
0xA1:"PERPUSTAKAANSUMMER",
0xA2:"PERPUSTAKAANFALL",
0xA3:"PERPUSTAKAANWINTER",
0xA4:"RMHMARRYLANTAI1SPRING",
0xA5:"RMHMARRYLANTAI1SUMMER",
0xA6:"RMHMARRYLANTAI1FALL",
0xA7:"RMHMARRYLANTAI1WINTER",
0xA8:"RMHMARRYLANTAI2SPRING",
0xA9:"RMHMARRYLANTAI2SUMMER",
0xAA:"RMHMARRYLANTAI2FALL",
0xAB:"RMHMARRYLANTAI2WINTER",
0xAC:"RMHELLISPRING",
0xAD:"RMHELLISUMMER",
0xAE:"RMHELLIFALL",
0xAF:"RMHELLIWINTER",
0xB0:"RMHMAYORSPRING",
0xB1:"RMHMAYORSUMMER",
0xB2:"RMHMAYORFALL",
0xB3:"RMHMAYORWINTER",
0xB4:"TOKOR1SPRING",
0xB5:"TOKOR1SUMMER",
0xB6:"TOKOR1FALL",
0xB7:"TOKOR1WINTER",
0xB8:"TOKOR2SPRING",
0xB9:"TOKOR2SUMMER",
0xBA:"TOKOR2FALL",
0xBB:"TOKOR2WINTER",
0xBC:"KLINIKLANTAI1SPRING",
0xBD:"KLINIKLANTAI1SUMMER",
0xBE:"KLINIKLANTAI1FALL",
0xBF:"KLINIKLANTAI1WINTER",
0xC0:"KLINIKLANTAI2SPRING",
0xC1:"KLINIKLANTAI2SUMMER",
0xC2:"KLINIKLANTAI2FALL",
0xC3:"KLINIKLANTAI2WINTER",
0xC4:"GEREJASPRING",
0xC5:"GEREJASUMMER",
0xC6:"GEREJAFALL",
0xC7:"GEREJAWINTER",
0xC8:"RMHHARVESTSPRITESPRING",
0xC9:"RMHHARVESTSPRITESUMMER",
0xCA:"RMHHARVESTSPRITEFALL",
0xCB:"RMHHARVESTSPRITEWINTER",
0xCC:"INNSPRING",
0xCD:"INNSUMMER",
0xCE:"INNFALL",
0xCF:"INNWINTER",
0xD0:"INNDAPURSPRING",
0xD1:"INNDAPURSUMMER",
0xD2:"INNDAPURFALL",
0xD3:"INNDAPURWINTER",
0xD4:"RMHGOTZSPRING",
0xD5:"RMHGOTZSUMMER",
0xD6:"RMHGOTZFALL",
0xD7:"RMHGOTZWINTER",
0xD8:"MINESPRING",
0xD9:"MINESUMMER",
0xDA:"MINEFALL",
0xDB:"MINEWINTER",
0xDC:"MINELAKE",
0xDD:"FESTTORCH",
0xDE:"FESTBALAPKUDA",
0xDF:"FESTMASAK",
0xE0:"FESTSUMOAYAM",
0xE1:"FESTTOMATO",
0xE2:"FESTSUP",
0xE3:"FESTDOG",
0xE4:"FESTUNK",
0xE5:"MTHILLSORE",
0xE6:"PASTFARM",
0xE7:"PASTHILL",
0xE8:"PASTMTHIKL",
0xE9:"NIGHTMTHILL",
0xEA:"MINEINLAKE",
0xEB:"MAPEB",
0xEC:"MAPEC",
0xED:"MAPED",
0xEE:"MAPEE",
0xEF:"MAPEF",
0xF0:"MAPF0",
0xF1:"MAPF1",
0xF2:"MAPF2",
0xF3:"MAPF3",
0xF4:"MAPF4",
0xF5:"MAPF5",
0xF6:"MAPF6",
0xF7:"MAPF7",
0xF8:"MAPF8",
0xF9:"MAPF9",
0xFA:"MAPFA",
0xFB:"MAPFB",
0xFC:"MAPFC",
0xFD:"MAPFD",
-2:"MAPFE",
-1:"MAPFF",
}
inv_mapdict = {v: k for k, v in mapdict.items()}
direction = {0 :"DIR↙",1:"DIR↖",2:"DIR↗",3:"DIR↘",}
inv_direction= {v: k for k, v in direction.items()}
cod = {
    -1 : "END",
0x01: "MOVE-NPC",
0x02: "OPENTEXTBOX",
0x04: "SETNPCPOS",
0x05: "SETNPCDIR",
0x08: "CHANGEMAP",
0x09:"MOVE-CAM-TO-POS",
0x17: "SOUND-MV",
0x18: "BGM",
0x1b: "LIGHT",
0x1f: "MC-HANDLING-ITEM",
0x25: "RESTORE",
0x28: "OPEN-DOOR",
0x2b:"FLOATING-ICON",
0x32: "CALL-EVENT",
0x33: "MOVE-CAM-TO-NPC",
0x34: "SET-ITEM-POS",
0x3d: "SETMCPOS",
0x3e: "MOVE-MC",
0x3f: "MC-ACTION",
0x40: "SET-MC-DIR",
0x45:"DELAY",
0x4C: "ADVANCE-TIME",
0x52: "MOVE-NPC(SP1)",
}
inv_cod = {v: k for k, v in cod.items()}
inv_cod.update({ "MOVE-CAM-TO-MC":0x33})

icon_dic = {
"HATI_HITAM":0,
"HATI_UNGU":1,
"HATI_BIRU":2,
"HATI_HIJAU":3,
"HATI_KUNING":4,
"HATI_OREN":5,
"HATI_MERAH":6,
"TANDA_KURSOR_CHAT":7,
"GAJELAS":8,
"GAJELAS_0":9,
"EMOSI":31,
"HENING":32,
"KECEWA":33,
"TANYA":34,
"SENANG":35,
"KAGET":36,
"LOVE":37,
"SANGAT_LOVE":38,
}
EVENTS_POS= {
1:  0x086D8E38,
2:  0x089D2E08,
3:  0x08A525A8,
4:  0x08B65678,
5:  0x08B9ED38,
6:  0x08BD83F8,
7:  0x08C11AB8,
8:  0x08EC62D8,
9:  0x08EFF998	,
10:0x08F39058	,
11:0x08FD00A8,
}
EVENTS_IDX = {
1:  52  ,
2:  122,
3:  147,
4:  173,
5:  174,
6:  175,
7:  176,
8:  265,
9:  266,
10:267,
11:276,
}


TRIGGER_POS ={
"(MAP00)":0x00167ADC,
"(MAP01)":0x001E56EC,
"(MAP02)":0x002632FC,
"(MAP03)":0x002D295C,
"(MAP04)":0x00350E9C,
"(MAP05)":0x003CF3DC,
"(MAP06)":0x0044D91C,
"(MAP07)":0x004BD8AC,
"(FARM1SPRING)":0x0053BDEC,
"(FARM1SUMMER)":0x005BA32C,
"(FARM1FALL)":0x0063886C,
"(FARM1WINTER)":0x006A87FC,
"(FARM2SPRING)":0x007288CC,
"(FARM2SUMMER)":0x007A899C,
"(FARM2FALL)":0x00828A6C,
"(FARM2WINTER)":0x0089A58C,
"(FARM3SPRING)":0x0091AF8C,
"(FARM3SUMMER)":0x0099B98C,
"(FARM3FALL)":0x00A1C38C,
"(FARM3WINTER)":0x00A8DEAC,
"(FARM4SPRING)":0x00B0E8AC,
"(FARM4SUMMER)":0x00B8F2AC,
"(FARM4FALL)":0x00C0FCAC,
"(FARM4WINTER)":0x00C82A2C,
"(MAPPOULTRYFAMSPRING)":0x00CE6340,
"(MAPPOULTRYFAMSUMMER)":0x00D498B0,
"(MAPPOULTRYFAMFALL)":0x00DACE20,
"(MAPPOULTRYFAMWINTER)":0x00E0CC70,
"(MAPYODELRANCHSPRING)":0x00E71440,
"(MAPYODELRANCHSUMMER)":0x00ED5C10,
"(MAPYODELRANCHFALL)":0x00F39AB0,
"(MAPYODELRANCHWINTER)":0x00F986A0,
"(MAPBLACKSMITHSPRING)":0x00FF6030 ,
"(MAPBLACKSMITHSUMMER)":0x010539C0,
"(MAPBLACKSMITHFALL)":0x010B1350,
"(MAPBLACKSMITHWINTER)":0x0110A360,
"(MAPPERPUSSPRING)":0x01171890,
"(MAPPERPUSSUMMER)":0x011D8E50,
"(MAPPERPUSFALL)":0x01240410,
"(MAPPERPUSWINTER)":0x012A4BE0,
"(MAPKLINIKSPRING)":0x0130E660,
"(MAPKLINIKSUMMER)":0x013780E0,
"(MAPKLINIKFALL)":0x013E1B60,
"(MAPKLINIKWINTER)":0x014487F0,
"(MAPGEREJASPRING)":0x014B2294,
"(MAPGEREJASUMMER)":0x0151BD14,
"(MAPGEREJAFALL)":0x01585794,
"(MAPGEREJAWINTER)":0x015EA894,
"(MAPINNSPRING)":0x016453EC,
"(MAPINNSUMMER)":0x016A08BC,
"(MAPINNFALL)":0x016FBD8C,
"(MAPINNWINTER)":0x017528DC,
"(MAPALUNALUNSPRING)":0x017AAA20,
"(MAPALUNALUNSUMMER)":0x01803100,
"(MAPALUNALUNFALL)":0x0185B7E0,
"(MAPALUNALUNWINTER)":0x018B47F0,
"(MAPPANTAISPRING)":0x0192FCF0,
"(MAPPANTAISUMMER)":0x019B2280,
"(MAPPANTAIFALL)":0x01A2EC30,
"(MAPPANTAIWINTER)":0x01AAF630,
"(MAPHILLTOPSPRING)":0x01AEA7A8,
"(MAPHILLTOPSUMMER)":0x01B26328,
"(MAPHILLTOPFALL)":0x01B61578,
"(MAPHILLTOPWINTER)":0x01B98778,
"(MAPHILL2SPRING)":0x01BE68B0 ,
"(MAPHILL2SUMMER)":0x01C34A30,
"(MAPHILL2FALL)":0x01C82BB0,
"(MAPHILL2WINTER)":0x01CCDF40,
"(MAPLAKESPRING)":0x01D1E580,
"(MAPLAKESUMMER)":0x01D6EBC0,
"(MAPLAKEFALL)":0x01DBF200,
"(MAPLAKEWINTER)":0x01E10170,
"(MAPHOTSPRINGSPRING)":0x01E5EC44,
"(MAPHOTSPRINGSUMMER)":0x01EAD6F4,
"(MAPHOTSPRINGFALL)":0x01EFC1A4,
"(MAPHOTSPRINGWINTER)":0x01F48794,
"(MAPGOTZSPRING)":0x01FAEB18 ,
"(MAPGOTZSUMMER)":0x020132E8,
"(MAPGOTZFALL)":0x02077AB8,
"(MAPGOTZWINTER)":0x020D9DC8,
"(MCHOUSE1SPRING)":0x021064F0,
"(MCHOUSE1SUMMER)":0x02133190,
"(MCHOUSE1FALL)":0x0215FE30 ,
"(MCHOUSE1WINTER)":0x0218CAD0,
"(MCHOUSE2SPRING)":0x021C2A70,
"(MCHOUSE2SUMMER)":0x021F8A10,
"(MCHOUSE2FALL)":0x0222E9B0,
"(MCHOUSE2WINTER)":0x02264950,
"(MCHOUSE3SPRING)":0x022A32C0,
"(MCHOUSE3SUMMER)":0x022E1C30,
"(MCHOUSE3FALL)":0x023205A0,
"(MCHOUSE3WINTER)":0x0235EF10 ,
"(KNDGKUDASPRING)":0x02384C28,
"(KNDGKUDASUMMER)":0x023AAA88,
"(KNDGKUDAFALL)":0x023D08E8,
"(KNDGKUDAWINTER)":0x023F6748,
"(KNDGDOMBASPRING)":0x0241A0E8,
"(KNDGDOMBASUMMER)":0x0243DA88,
"(KNDGDOMBAFALL)":0x02461428,
"(KNDGDOMBAWINTER)":0x02484DC8,
"(KNDGDOMBAUPSPRING)":0x024AE348,
"(KNDGDOMBAUPSUMMER)":0x024D78C8,
"(KNDGDOMBAUPFALL)":0x02500E48,
"(KNDGDOMBAUPWINTER)":0x0252A3C8,
"(KNDGDOMBAUP1SPRING)":0x02555E08,
"(KNDGDOMBAUP1SUMMER)":0x02581848,
"(KNDGDOMBAUP1FALL)":0x025AD288,
"(KNDGDOMBAUP1WINTER)":0x025D8CC8,
"(KNDGDOMBAUP2SPRING)":0x02605968,
"(KNDGDOMBAUP2SUMMER)":0x02632608,
"(KNDGDOMBAUP2FALL)":0x0265F2A8,
"(KNDGDOMBAUP2WINTER)":0x0268BF48,
"(KNDGAYAMSPRING)":0x026AB898,
"(KNDGAYAMSUMMER)":0x026CB1E8,
"(KNDGAYAMFALL)":0x026EAB38,
"(KNDGAYAMWINTER)":0x0270A488,
"(KNDGAYAMUP1SPRING)":0x0272C298,
"(KNDGAYAMUP1SUMMER)":0x0274E0A8,
"(KNDGAYAMUP1FALL)":0x0276FEB8 ,
"(KNDGAYAMUP1WINTER)":0x02791CC8,
"(KNDGAYAMUP2SPRING)":0x027B5668,
"(KNDGAYAMUP2SUMMER)":0x027D9008,
"(KNDGAYAMUP2FALL)":0x027FC9A8,
"(KNDGAYAMUP2WINTER)":0x02820348,
"(HOTHOUSESPRING)":0x028498C8,
"(HOTHOUSESUMMER)":0x02872E48,
"(HOTHOUSEFALL)":0x0289C3C8,
"(HOTHOUSEWINTER)":0x028C5948,
"(RMHPOPURILANTAI1SPRING)":0x028F3E9C,
"(RMHPOPURILANTAI1SUMMER)":0x02921D9C,
"(RMHPOPURILANTAI1FALL)":0x0294FC9C,
"(RMHPOPURILANTAI1WINTER)":0x0297DB9C,
"(RMHPOPURILANTAI2SPRING)":0x029A6810,
"(RMHPOPURILANTAI2SUMMER)":0x029CF460,
"(RMHPOPURILANTAI2FALL)":0x029F80B0,
"(RMHPOPURILANTAI2WINTER)":0x02A20D00,
"(RMHBARLEYLANTAI1SPRING)":0x02A56C58,
"(RMHBARLEYLANTAI1SUMMER)":0x02A8CBF8,
"(RMHBARLEYLANTAI1FALL)":0x02AC2B98,
"(RMHBARLEYLANTAI1WINTER)":0x02AF8B38,
"(RMHBARLEYLANTAI2SPRING)":0x02B27368,
"(RMHBARLEYLANTAI2SUMMER)":0x02B55B98,
"(RMHBARLEYLANTAI2FALL)":0x02B843C8,
"(RMHBARLEYLANTAI2WINTER)":0x02BB2BF8 ,
"(RMHMANNALT1SPRING)":0x02BE3000,
"(RMHMANNALT1SUMMER)":0x02C133C0,
"(RMHMANNALT1FALL)":0x02C43780,
"(RMHMANNALT1WINTER)":0x02C73B40,
"(RMHMANNALT2SPRING)":0x02CA19F8,
"(RMHMANNALT2SUMMER)":0x02CCF8F8,
"(RMHMANNALT2FALL)":0x02CFD7F8,
"(RMHMANNALT2WINTER)":0x02D2B6F8,
"(RMHMANNABASEMENTSPRING)":0x02D4E78C,
"(RMHMANNABASEMENTSUMMER)":0x02D717FC,
"(RMHMANNABASEMENTFALL)":0x02D9486C,
"(RMHMANNABASEMENTWINTER)":0x02DB78DC,
"(RMHSAIBARAHSPRING)":0x02DE20BC,
"(RMHSAIBARAHSUMMER)":0x02E0C89C,
"(RMHSAIBARAHFALL)":0x02E3707C,
"(RMHSAIBARAHWINTER)":0x02E6185C,
"(PERPUSTAKAANSPRING)":0x02E91CD0,
"(PERPUSTAKAANSUMMER)":0x02EC2090,
"(PERPUSTAKAANFALL)":0x02EF2450 ,
"(PERPUSTAKAANWINTER)":0x02F22810,
"(RMHMARRYLANTAI1SPRING)":0x02F4981C,
"(RMHMARRYLANTAI1SUMMER)":0x02F708DC,
"(RMHMARRYLANTAI1FALL)":0x02F9799C,
"(RMHMARRYLANTAI1WINTER)":0x02FBEA5C ,
"(RMHMARRYLANTAI2SPRING)":0x02FE9260 ,
"(RMHMARRYLANTAI2SUMMER)":0x03013A40,
"(RMHMARRYLANTAI2FALL)":0x0303E220,
"(RMHMARRYLANTAI2WINTER)":0x03068A00,
"(RMHELLISPRING)":0x030928F8,
"(RMHELLISUMMER)":0x030BC7A8,
"(RMHELLIFALL)":0x030E6658,
"(RMHELLIWINTER)":0x03110508,
"(RMHMAYORSPRING)":0x0313B5AC,
"(RMHMAYORSUMMER)":0x031666BC,
"(RMHMAYORFALL)":0x031917CC,
"(RMHMAYORWINTER)":0x031BC8DC,
"(TOKOR1SPRING)":0x031DF9B8,
"(TOKOR1SUMMER)":0x03202A28,
"(TOKOR1FALL)":0x03225A98,
"(TOKOR1WINTER)":0x03248B08,
"(TOKOR2SPRING)":0x0327BC70,
"(TOKOR2SUMMER)":0x032AEE20,
"(TOKOR2FALL)":0x032E1FD0,
"(TOKOR2WINTER)":0x03315180,
"(KLINIKLANTAI1SPRING)":0x03342870,
"(KLINIKLANTAI1SUMMER)":0x0336FE40 ,
"(KLINIKLANTAI1FALL)":0x0339D410,
"(KLINIKLANTAI1WINTER)":0x033CA9E0,
"(KLINIKLANTAI2SPRING)":0x033F5988,
"(KLINIKLANTAI2SUMMER)":0x03420A98,
"(KLINIKLANTAI2FALL)":0x0344BBA8,
"(KLINIKLANTAI2WINTER)":0x03476CB8,
"(GEREJASPRING)":0x034A5F5C,
"(GEREJASUMMER)":0x034D50BC,
"(GEREJAFALL)":0x0350421C,
"(GEREJAWINTER)":0x0353337C,
"(RMHHARVESTSPRITESPRING)":0x03563640,
"(RMHHARVESTSPRITESUMMER)":0x03593A00,
"(RMHHARVESTSPRITEFALL)":0x035C3DC0,
"(RMHHARVESTSPRITEWINTER)":0x035F4180,
"(INNSPRING)":0x03644170,
"(INNSUMMER)":0x036947B0,
"(INNFALL)":0x036E4DF0,
"(INNWINTER)":0x03735430,
"(INNDAPURSPRING)":0x03769560,
"(INNDAPURSUMMER)":0x0379D040,
"(INNDAPURFALL)":0x037D0B20,
"(INNDAPURWINTER)":0x03804600,
"(RMHGOTZSPRING)":0x038324B8,
"(RMHGOTZSUMMER)":0x038603B8,
"(RMHGOTZFALL)":0x0388E2B8,
"(RMHGOTZWINTER)":0x038BC1B8,
"(MINESPRING)":0x038DB4FC,
"(MINESUMMER)":0x038FAE4C,
"(MINEFALL)":0x0391A79C,
"(MINEWINTER)":0x0393A0EC,
"(MINELAKE)":0x0395E3BC,
"(FESTTORCH)":0x039BC710,
"(FESTBALAPKUDA)":0x03A22A70,
"(FESTMASAK)":0x03A831F0,
"(FESTSUMOAYAM)":0x03ADD460,
"(FESTTOMATO)":0x03B400A0,
"(FESTSUP)":0x03BA3F40,
"(FESTDOG)":0x03C07DE0,
"(FESTUNK)":0x03C660A0,
"(MTHILLSORE)":0x03CA2228,
"(PASTFARM)":0x03D1A82C,
"(PASTHILL)":0x03D68CC0,
"(PASTMTHIKL)":0x03DA3628,
"(NIGHTMTHILL)":0x03DE6918,
"(MINEINLAKE)":0x03E05BCC,
}

DICT_ITEM = {"SABIT":1,
"SABIT_TEMBAGA":2,
"SABIT_PERAK":3,
"SABIT_EMAS":4,
"SABIT_MYSTRILE":5,
"CANGKUL":6,
"CANGKUL_TEMBAGA":7,
"CANGKUL_PERAK":8,
"CANGKUL_EMAS":9,
"CANGKUL_MYSTRILE":10,
"KAPAK":11,
"KAPAK_TEMBAGA":12,
"KAPAK_PERAK":13,
"KAPAK_EMAS":14,
"KAPAK_MYSTRILE":15,
"PALU":16,
"PALU_TEMBAGA":17,
"PALU_PERAK":18,
"PALU_EMAS":19,
"PALU_MYSTRILE":20,
"ALAT_SIRAM":21,
"ALAT_SIRAM_TEMBAGA":22,
"ALAT_SIRAM_PERAK":23,
"ALAT_SIRAM_EMAS":24,
"ALAT_SIRAM_MYSTRILE":25,
"ALAT_PERAH":26,
"ALAT_PANGKAS":27,
"SIKAT":28,
"BELL":29,
"OBAT_HEWAN":30,
"RAMUAN_SAPI_AJAIB":31,
"RAMUAN_DOMBA_AJAIB":32,
"BLUE_FEATHER":33,
"BIBIT_LOBAK":34,
"BIBIT_KENTANG":35,
"BIBIT_KETIMUN":36,
"BIBIT_STROBERI":37,
"BIBIT_KUBIS":38,
"BIBIT_TOMAT":39,
"BIBIT_JAGUNG":40,
"BIBIT_BAWANG":41,
"BIBIT_LABU":42,
"BIBIT_NANAS":43,
"BIBIT_TERUNG":44,
"BIBIT_WORTEL":45,
"BIBIT_KENTANG_MANIS":46,
"BIBIT_BAYAM":47,
"BIBIT_CABAI_HIJAU":48,
"BIBIT_MOONDROP":49,
"BIBIT_PINK_CAT":50,
"BIBIT_MAGIC_RED":51,
"BIBIT_TOY_FLOWER":52,
"BIBIT_ORANGE_CUP":53,
"BIBIT_RUMPUT":54,
"OCARINA":55,
"PANCINGAN_KECIL":56,
"PANCINGAN_BESAR":57,
"BATU":58,
"BATU_BESAR":59,
"KARANG":60,
"TUNGGUL":61,
"RANTING":62,
"KAYU":63,
"RUMPUT_LIAR":64,
"LOBAK":65,
"KENTANG":66,
"KETIMUN":67,
"STROBERI":68,
"KUBIS":69,
"TOMAT":70,
"JAGUNG":71,
"BAWANG":72,
"LABU":73,
"NANAS":74,
"TERUNG":75,
"WORTEL":76,
"KENTANG_MANIS_1":77,
"BAYAM":78,
"CABAI_HIJAU":79,
"RUMPUT":80,
"BUNGA_MOONDROP":81,
"BUNGA_PINK_CAT":82,
"BUNGA_BLUE_MAGIC_RED":83,
"BUNGA_RED_MAGIC_RED":84,
"TOY_FLOWER":85,
"BUAH_ORANGE_CUP":86,
"APEL":87,
"REBUNG_BAMBU":88,
"ANGGUR_LIAR":89,
"JAMUR":90,
"JAMUR_BERACUN":91,
"TRUFFLE":92,
"RUMPUT_BIRU":93,
"RUMPUT_MERAH":94,
"RUMPUT_HIJAU":95,
"MYSTRILE":96,
"ORICHALCUM":97,
"ADAMANTITE":98,
"ADA_SEBUAH_RESEP_MEMBUAT_KECAP":99,
"KERANJANG":100,
"BOLA":101,
"KOIN":102,
"POWER_BERRY":103,
"PAKAN":104,
"PAKAN_AYAM":105,
"PAKAN_1":106,
"PAKAN_AYAM._SATU_10G.":107,
"PAKAN_IKAN_CUMA_20G.":108,
"RANSEL_LEVEL_2":109,
"RANSEL_LEVEL_3":110,
"POCKETSTATION":111,
"ADA_BUNGKUSAN_BERUPA_HADIAH.":112,
"VASE":113,
"PISAU":114,
"PENGGORENGAN":115,
"PANCI":116,
"MIXER":117,
"SODA_WISKI":118,
"ROLLING_PIN":119,
"OVEN":120,
"SET_BUMBU":121,
"LOGAM_EMAS":122,
"LOGAM_PERAK":123,
"LOGAM_TEMBAGA":124,
"CARP_PRINT":125,
"CHAR_PRINT":126,
"CATFISH_PRINT":127,
"SQUID_PRINT":128,
"ANGLER_PRINT":129,
"SEA_BREAM_PRINT":130,
"S.LEBAH":131,
"PAKAN_IKAN":132,
"BUAH_ORANGE_CUP_1":133,
"TELUR":134,
"TELUR_REBUS_SPA":135,
"MAYONNAISE_S":136,
"MAYONNAISE_M":137,
"MAYONNAISE_L":138,
"SUSU_S":139,
"SUSU_M":140,
"SUSU_L":141,
"KEJU_S":142,
"KEJU_M":143,
"KEJU_L":144,
"WOOL_S":145,
"WOOL_M":146,
"WOOL_L":147,
"BENANG_S":148,
"BENANG_M":149,
"BENANG_L":150,
"MADU":151,
"SUPER_ULTRA_GREAT_DELICIOUS":152,
"BOLA_NASI":153,
"ROTI":154,
"BODIGIZER":155,
"BODIGIZER_XL":156,
"TURBOJOLT":157,
"TURBOJOLT_XL":158,
"ANGGUR":159,
"JUS_ANGGUR":160,
"IKAN_BESAR":161,
"IKAN_SEDANG":162,
"IKAN_KECIL":163,
"ADA_YG_DIBUNGKUS_SBG_HADIAH.":164,
"MINYAK":165,
"TEPUNG":166,
"BUBUK_KARI":167,
"SET_MEAL":168,
"MINUMAN_ANGGUR_LIAR":169,
"SUSU":170,
"AIR_PUTIH":171,
"SNOWCONE":172,
"VEGGIE_PANCAKE":173,
"NASI_GORENG":174,
"STIR_FRY":175,
"SUP_MISO":176,
"STEW":177,
"KARI":178,
"SALAD":179,
"JUS_BUAH":180,
"JUS_SAYURAN":181,
"JUS_CAMPUR":182,
"SANDWICH":183,
"ASINAN_LOBAK":184,
"FRIES":185,
"ASINAN":186,
"SELAI_STROBERI":187,
"SUSU_STROBERI":188,
"JUS_TOMAT":189,
"POPCORN":190,
"PUDING_LABU":191,
"HAPPY_EGGPLANT":192,
"KENTANG_MANIS_2":193,
"KENTANG_PANGGANG":194,
"GREENS":195,
"TELUR_PECAH":196,
"OMELET":197,
"TELUR_REBUS":198,
"SUSU_PANAS":199,
"MENTEGA":200,
"KUE_KEJU":201,
"CHEESE_FONDUE":202,
"SELAI_APEL":203,
"KUE_APEL":204,
"NASI_BAMBU":205,
"NASI_JAMUR":206,
"TRUFFLE_RICE":207,
"SELAI_ANGGUR":208,
"SUSHI":209,
"CHIRASHI_SUSHI":210,
"JAM_BUN":211,
"ROTI_KISMIS":212,
"DINNER_ROLL":213,
"SASHIMI":214,
"IKAN_BAKAR":215,
"PIZZA":216,
"PASTA":217,
"MIE":218,
"MIE_KARI":219,
"MIE_TEMPURA":220,
"MIE_GORENG":221,
"TEMPURA":222,
"KUE_KERING":223,
"ES_KRIM":224,
"KUE_MANIS":225,
"KUE_GAGAL":226,
"SUSU_G":227,
"KEJU_G":228,
"MAYONNAISE_G":229,
"BENANG_G":230,
"WOOL_G":231,
"TELUR_EMAS":232,
"KALENG":233,
"SEBUAH_PESAN_DIBOTOL":234,
"SEPATU":235,
"TULANG_IKAN":236,
"CARP":237,
"CHAR":238,
"CATFISH":239,
"SQUID":240,
"ANGLER":241,
"SEA_BREAM":242,
"COKLAT":243,
"KUE_COKLAT":244,
"BOLU_COKLAT":245,
"KUE_BOLA_LIHAT_BULAN":246,
"GELANG":247,
"KALUNG":248,
"ANTING":249,
"PERBAN":250,
"DAUN_TEH_MENENANGKAN":251,
"TEH_PENENANG":252,
"FRUIT_LATTE":253,
"VEGGIE_LATTE":254,
"MIXED_LATTE":255,
"PARFUM":256,
"SEBUAH_FOTO":257,
"SURAT":258,
"UNDANGAN":259,
"RAJA_DAN_SI_PENEBANG_KAYU":260,
"BUKU_GAMBAR_PENDUDUK":261,
"[{400C}]":262,
"[{400C}]_1":263,
"KUCING":264,
"[{4022}]":265,
"[{4022}]_1":266,
"KELINCI":267,
"KELINCI_1":268,
"TUPAI":269,
"RUBAH":270,
"MONYET":271,
"ULAR":272,
"KEPITING":273,
"KUPU-KUPU":274,
"KUPU-KUPU_1":275,
"KUMBANG":276,
"KUMBANG_STAG":277,
"CICADA":278,
"CAPUNG":279,
"JENGKRIK":280,
"KUMBANG_KECIL":281,
"BELALANG":282,
"TRIANGLE_SANDWICH":283,
"DELUXE_SANDWICH":284,
"BOLA_NASI_1":285,
"RED_BEAN_BUN":286,
"PIZZA_1":287,
"DAGING":288,
"TOAST":289,
"TELUR_1":290,
"TELUR_2":291,
"TELUR_3":292,
"TELUR_POPURI":293,
"MYSTIC_BERRY":294,
"BOTOL_DENGAN_PESAN_DI_DALAMNYA":295,
"BIBIT_SPRING":296,
"BIBIT_SUMMER":297,
"BIBIT_SPRING_1":298,
"AYAM_MAINAN":299,
"IKAT_SAPI":300,
"PETA_DEWA":301,
"KECAP_MANIS":302,
"NASI_OMELET":303,
"SALAD_1":304,
"APPLE_PIE":305,
"BOLU_KEJU":306,
"KUE_KERING_1":307,
"AIR_PUTIH_1":308,
"JAGUNG_BAKAR":309,
"PASTA_1":310,
"PIZZA_2":311,
"SAMPAH":312,
"ANGGUR_DARI_AJA_WINERY":313,
"RUMPUT_MATI":314,
"BATU_WINTER":315,
"RANTING_WINTER":316,
"KAYU_WINTER":317,
"AIR_PUTIH_2":318,
}
mcActDict = {
"(LAP_WAJAH)":61,
"(CAPEK)":62,
"(JATUH)":63,
"(PINGSAN)":64,
"(ERROR)":65,
"(NANGIS)":66,
"(SANGAT_CAPEK)":67,
"(MABOK)":68,
"(MANCING)":69,
"(BUANG_SAMPAH)":70,
"(ANGGUK)":71,
"(GELENG)":72,
"(MINUM)":73,
"(TIDUR)":74,
"(JONGKOK_TRUS_JALAN)":75,
"(MINUM_1)":76,
"(MERAS)":77,
"(MOTONG)":78,
"(SIKAT)":79,
"(LONCENG)":80,
"(MENGHAMILI)":81,
"(ISI_AIR)":82,
"(LEMPAR_BENIH)":83,
"(SANTAI_TRUS_BANGUN)":84,
"(MENGHAMILI_1)":85,
}
disNpc = [0x000C4012,
0x000C4072,
0x000DC966,
0x000DC9A2,
0x000DC9FA,
0x000DCA5A,
0x000DE1FE	,  
0x000EAD42,

]